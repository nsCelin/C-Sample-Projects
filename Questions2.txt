using System;

namespace SamplePrograms
{
    class Questions2
    {
        static String location;
        static DateTime time;

        /*static void Main(String[] args)
        {
            Console.WriteLine(location == null ? "location is null" : location); //location is null
            Console.WriteLine(time == null ? "time is null" : time.ToString()); //1/1/01 12:00:00 am

            //Although both variables are uninitialized, String is a reference type and DateTime is 
             //a value type. As a value type, an unitialized DateTime variable is set to a default value of midnight of 1/1/1 (yup, that’s the year 1 A.D.), not null.

            if(time == null) //This comparison results in false
            {               
            }
             //We might think that since 
             //DateTime variable can never be null (it is automatically initialized to Jan 1, 0001), the compiler would complain when a DateTime variable is compared to null.
             //The == operator will cast its operands to different allowable types in order to get a common type on both sides,which it can then compare.
             //This can sometimes result in unexpected behavior, as is the case with the comparison of a DateTime variable and null. In such a case, both the DateTime variable 
             //and the null literal can be cast to Nullable<DateTime>. Therefore it is legal to compare the two values, even though the result will always be false.
             

            double x = 5.0;
            int y = 5;
            Console.WriteLine(x == y); // So here == changes x to 5.
        }*/
    }
}
